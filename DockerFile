FROM mcr.microsoft.com/mssql/server:2022-latest
# Other Database versions are available from https://hub.docker.com/_/microsoft-mssql-server 
# Expose this port on the docker image
EXPOSE 1433

#This variable must be set using --build-arg INCLUDE_ALL_DATABASES to restore all databases
ARG INCLUDE_ALL_DATABASES=0

#Depending on the value of the ARG, the bash script will restore/attach databases
ENV INCLUDE_ALL_DATABASES=${INCLUDE_ALL_DATABASES}

LABEL "Developer" "Sarath Boppudi <sarath@sarathboppudi.com"
LABEL "Project" "Microsoft SQL Server Images with sample databases"

# Since SQL Server is in a non-root container, we need to force intall packages
USER root

RUN apt-get update && apt-get install -y \
        curl \
        apt-transport-https \
        p7zip-full


#Create local_mountpoint folder where the restores will be happening
#This step is critical for stateful deployments
RUN mkdir -p /var/opt/mssql/data
RUN chown 10001:0 /var/opt/mssql/data
RUN chmod +rwx /var/opt/mssql/data

# Get to the default user (mssql - 1001)
RUN mkdir -p /var/opt/mssql/shared_folder
RUN mkdir -p  /var/opt/mssql/backup
WORKDIR /var/opt/mssql/backup

######################################################################
################# DATABASES SECTION ##################################
# 1) These are the databases to have in the image
# 2) Setup.sql has the RESTORE commands.
######################################################################

# Local .bak files
#COPY ./Backups/Pubs.bak ./
#COPY ./Backups/Northwind.bak ./

RUN curl -k -L -o WideWorldImporters-Full.bak https://github.com/Microsoft/sql-server-samples/releases/download/wide-world-importers-v1.0/WideWorldImporters-Full.bak
RUN curl -k -L -o AdventureWorks.bak https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorks.bak

## The rest of the databases can be added-dropped manually
RUN if [ "$INCLUDE_ALL_DATABASES" = "1" ] ; then curl -k -L -o AdventureWorks2016.bak https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorks2016.bak ; else echo 'AdventureWorks2016 skipped since INCLUDE_ALL_DATABASES=0'; fi
RUN if [ "$INCLUDE_ALL_DATABASES" = "1" ] ; then curl -k -L -o AdventureWorks2014.bak https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorks2014.bak ; else echo 'AdventureWorks2014 skipped since INCLUDE_ALL_DATABASES=0'; fi
RUN if [ "$INCLUDE_ALL_DATABASES" = "1" ] ; then curl -k -L -o AdventureWorks2012.bak https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorks2012.bak ; else echo 'AdventureWorks2012 skipped since INCLUDE_ALL_DATABASES=0'; fi

## BIG DATABASES
#
RUN if [ "$INCLUDE_ALL_DATABASES" = "1" ] ; then curl -k -L -o AdventureWorksDW2017.bak https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorksDW2017.bak; else echo 'AdventureWorksDW2017 skipped since INCLUDE_ALL_DATABASES=0'; fi
RUN if [ "$INCLUDE_ALL_DATABASES" = "1" ] ; then curl -k -L -o WideWorldImportersDW-Full.bak https://github.com/Microsoft/sql-server-samples/releases/download/wide-world-importers-v1.0/WideWorldImportersDW-Full.bak; else echo 'WideWorldImportersDW-Full skipped since INCLUDE_ALL_DATABASES=0'; fi


# StackOverflow2010
# 
RUN if [ "$INCLUDE_ALL_DATABASES" = "1" ] ; then  curl -k -L -o StackOverflow2010.7z http://downloads.brentozar.com.s3.amazonaws.com/StackOverflow2010.7z; else echo 'StackOverflow2010 skipped since INCLUDE_ALL_DATABASES=0'; fi
# This is going to unzip the 10Gb StackOverflow sample database
#
RUN if [ "$INCLUDE_ALL_DATABASES" = "1" ] ; then 7za x StackOverflow2010.7z -o/var/opt/mssql/data/; fi


#####################################################################################

RUN mkdir -p /usr/config
WORKDIR /usr/config

COPY setup.* ./
COPY entrypoint.sh ./

# Since SQL Server 2019 is non-root container, we need to force this to install packages
USER root
RUN chown -R 10001:0 setup.sh
RUN chown -R 10001:0 entrypoint.sh
# Get to the default user
USER 10001

RUN chmod +x setup.sh
RUN chmod +x entrypoint.sh

# This entrypoint start sql server, restores data and waits infinitely
ENTRYPOINT ["./entrypoint.sh"]

CMD ["sleep infinity"]